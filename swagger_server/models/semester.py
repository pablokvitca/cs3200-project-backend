# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Semester(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, semester: str=None, year: int=None):  # noqa: E501
        """Semester - a model defined in Swagger

        :param semester: The semester of this Semester.  # noqa: E501
        :type semester: str
        :param year: The year of this Semester.  # noqa: E501
        :type year: int
        """
        self.swagger_types = {
            'semester': str,
            'year': int
        }

        self.attribute_map = {
            'semester': 'semester',
            'year': 'year'
        }

        self._semester = semester
        self._year = year

    @classmethod
    def from_dict(cls, dikt) -> 'Semester':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Semester of this Semester.  # noqa: E501
        :rtype: Semester
        """
        return util.deserialize_model(dikt, cls)

    @property
    def semester(self) -> str:
        """Gets the semester of this Semester.

        a semester offered during a year  # noqa: E501

        :return: The semester of this Semester.
        :rtype: str
        """
        return self._semester

    @semester.setter
    def semester(self, semester: str):
        """Sets the semester of this Semester.

        a semester offered during a year  # noqa: E501

        :param semester: The semester of this Semester.
        :type semester: str
        """
        allowed_values = ["fall", "spring", "summer 1", "summer 2", "full summer"]  # noqa: E501
        if semester not in allowed_values:
            raise ValueError(
                "Invalid value for `semester` ({0}), must be one of {1}"
                .format(semester, allowed_values)
            )

        self._semester = semester

    @property
    def year(self) -> int:
        """Gets the year of this Semester.


        :return: The year of this Semester.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Semester.


        :param year: The year of this Semester.
        :type year: int
        """
        if year is not None and year > 3000:  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `3000`")  # noqa: E501
        if year is not None and year < 2000:  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._year = year
