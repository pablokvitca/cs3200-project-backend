# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClassAttribute(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attr_name: str=None, class_dept: str=None, class_number: int=None):  # noqa: E501
        """ClassAttribute - a model defined in Swagger

        :param attr_name: The attr_name of this ClassAttribute.  # noqa: E501
        :type attr_name: str
        :param class_dept: The class_dept of this ClassAttribute.  # noqa: E501
        :type class_dept: str
        :param class_number: The class_number of this ClassAttribute.  # noqa: E501
        :type class_number: int
        """
        self.swagger_types = {
            'attr_name': str,
            'class_dept': str,
            'class_number': int
        }

        self.attribute_map = {
            'attr_name': 'attr_name',
            'class_dept': 'class_dept',
            'class_number': 'class_number'
        }

        self._attr_name = attr_name
        self._class_dept = class_dept
        self._class_number = class_number

    @classmethod
    def from_dict(cls, dikt) -> 'ClassAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClassAttribute of this ClassAttribute.  # noqa: E501
        :rtype: ClassAttribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attr_name(self) -> str:
        """Gets the attr_name of this ClassAttribute.


        :return: The attr_name of this ClassAttribute.
        :rtype: str
        """
        return self._attr_name

    @attr_name.setter
    def attr_name(self, attr_name: str):
        """Sets the attr_name of this ClassAttribute.


        :param attr_name: The attr_name of this ClassAttribute.
        :type attr_name: str
        """
        if attr_name is not None and len(attr_name) > 255:
            raise ValueError("Invalid value for `attr_name`, length must be less than or equal to `255`")  # noqa: E501
        if attr_name is not None and len(attr_name) < 0:
            raise ValueError("Invalid value for `attr_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._attr_name = attr_name

    @property
    def class_dept(self) -> str:
        """Gets the class_dept of this ClassAttribute.


        :return: The class_dept of this ClassAttribute.
        :rtype: str
        """
        return self._class_dept

    @class_dept.setter
    def class_dept(self, class_dept: str):
        """Sets the class_dept of this ClassAttribute.


        :param class_dept: The class_dept of this ClassAttribute.
        :type class_dept: str
        """
        if class_dept is not None and len(class_dept) > 5:
            raise ValueError("Invalid value for `class_dept`, length must be less than or equal to `5`")  # noqa: E501
        if class_dept is not None and len(class_dept) < 2:
            raise ValueError("Invalid value for `class_dept`, length must be greater than or equal to `2`")  # noqa: E501

        self._class_dept = class_dept

    @property
    def class_number(self) -> int:
        """Gets the class_number of this ClassAttribute.


        :return: The class_number of this ClassAttribute.
        :rtype: int
        """
        return self._class_number

    @class_number.setter
    def class_number(self, class_number: int):
        """Sets the class_number of this ClassAttribute.


        :param class_number: The class_number of this ClassAttribute.
        :type class_number: int
        """

        self._class_number = class_number
