# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, nupath: bool=None):  # noqa: E501
        """Attribute - a model defined in Swagger

        :param name: The name of this Attribute.  # noqa: E501
        :type name: str
        :param nupath: The nupath of this Attribute.  # noqa: E501
        :type nupath: bool
        """
        self.swagger_types = {
            'name': str,
            'nupath': bool
        }

        self.attribute_map = {
            'name': 'name',
            'nupath': 'nupath'
        }

        self._name = name
        self._nupath = nupath

    @classmethod
    def from_dict(cls, dikt) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attribute of this Attribute.  # noqa: E501
        :rtype: Attribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Attribute.


        :return: The name of this Attribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Attribute.


        :param name: The name of this Attribute.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def nupath(self) -> bool:
        """Gets the nupath of this Attribute.


        :return: The nupath of this Attribute.
        :rtype: bool
        """
        return self._nupath

    @nupath.setter
    def nupath(self, nupath: bool):
        """Sets the nupath of this Attribute.


        :param nupath: The nupath of this Attribute.
        :type nupath: bool
        """

        self._nupath = nupath
