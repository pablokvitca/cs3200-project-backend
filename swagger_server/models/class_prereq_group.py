# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClassPrereqGroup(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, min_fulfilled_req: int=None, class_dept: str=None, class_number: int=None):  # noqa: E501
        """ClassPrereqGroup - a model defined in Swagger

        :param group_id: The group_id of this ClassPrereqGroup.  # noqa: E501
        :type group_id: int
        :param min_fulfilled_req: The min_fulfilled_req of this ClassPrereqGroup.  # noqa: E501
        :type min_fulfilled_req: int
        :param class_dept: The class_dept of this ClassPrereqGroup.  # noqa: E501
        :type class_dept: str
        :param class_number: The class_number of this ClassPrereqGroup.  # noqa: E501
        :type class_number: int
        """
        self.swagger_types = {
            'group_id': int,
            'min_fulfilled_req': int,
            'class_dept': str,
            'class_number': int
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'min_fulfilled_req': 'min_fulfilled_req',
            'class_dept': 'class_dept',
            'class_number': 'class_number'
        }

        self._group_id = group_id
        self._min_fulfilled_req = min_fulfilled_req
        self._class_dept = class_dept
        self._class_number = class_number

    @classmethod
    def from_dict(cls, dikt) -> 'ClassPrereqGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClassPrereqGroup of this ClassPrereqGroup.  # noqa: E501
        :rtype: ClassPrereqGroup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self) -> int:
        """Gets the group_id of this ClassPrereqGroup.


        :return: The group_id of this ClassPrereqGroup.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this ClassPrereqGroup.


        :param group_id: The group_id of this ClassPrereqGroup.
        :type group_id: int
        """
        if group_id is not None and group_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._group_id = group_id

    @property
    def min_fulfilled_req(self) -> int:
        """Gets the min_fulfilled_req of this ClassPrereqGroup.


        :return: The min_fulfilled_req of this ClassPrereqGroup.
        :rtype: int
        """
        return self._min_fulfilled_req

    @min_fulfilled_req.setter
    def min_fulfilled_req(self, min_fulfilled_req: int):
        """Sets the min_fulfilled_req of this ClassPrereqGroup.


        :param min_fulfilled_req: The min_fulfilled_req of this ClassPrereqGroup.
        :type min_fulfilled_req: int
        """
        if min_fulfilled_req is not None and min_fulfilled_req < 1:  # noqa: E501
            raise ValueError("Invalid value for `min_fulfilled_req`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_fulfilled_req = min_fulfilled_req

    @property
    def class_dept(self) -> str:
        """Gets the class_dept of this ClassPrereqGroup.


        :return: The class_dept of this ClassPrereqGroup.
        :rtype: str
        """
        return self._class_dept

    @class_dept.setter
    def class_dept(self, class_dept: str):
        """Sets the class_dept of this ClassPrereqGroup.


        :param class_dept: The class_dept of this ClassPrereqGroup.
        :type class_dept: str
        """
        if class_dept is not None and len(class_dept) > 5:
            raise ValueError("Invalid value for `class_dept`, length must be less than or equal to `5`")  # noqa: E501
        if class_dept is not None and len(class_dept) < 2:
            raise ValueError("Invalid value for `class_dept`, length must be greater than or equal to `2`")  # noqa: E501

        self._class_dept = class_dept

    @property
    def class_number(self) -> int:
        """Gets the class_number of this ClassPrereqGroup.


        :return: The class_number of this ClassPrereqGroup.
        :rtype: int
        """
        return self._class_number

    @class_number.setter
    def class_number(self, class_number: int):
        """Sets the class_number of this ClassPrereqGroup.


        :param class_number: The class_number of this ClassPrereqGroup.
        :type class_number: int
        """
        if class_number is not None and class_number > 9999:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value less than or equal to `9999`")  # noqa: E501
        if class_number is not None and class_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._class_number = class_number
