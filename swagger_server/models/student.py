# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Student(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nuid: int=None, email: str=None, name: str=None, password: str=None):  # noqa: E501
        """Student - a model defined in Swagger

        :param nuid: The nuid of this Student.  # noqa: E501
        :type nuid: int
        :param email: The email of this Student.  # noqa: E501
        :type email: str
        :param name: The name of this Student.  # noqa: E501
        :type name: str
        :param password: The password of this Student.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'nuid': int,
            'email': str,
            'name': str,
            'password': str
        }

        self.attribute_map = {
            'nuid': 'nuid',
            'email': 'email',
            'name': 'name',
            'password': 'password'
        }

        self._nuid = nuid
        self._email = email
        self._name = name
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'Student':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Student of this Student.  # noqa: E501
        :rtype: Student
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nuid(self) -> int:
        """Gets the nuid of this Student.


        :return: The nuid of this Student.
        :rtype: int
        """
        return self._nuid

    @nuid.setter
    def nuid(self, nuid: int):
        """Sets the nuid of this Student.


        :param nuid: The nuid of this Student.
        :type nuid: int
        """
        if nuid is not None and nuid < 1:  # noqa: E501
            raise ValueError("Invalid value for `nuid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nuid = nuid

    @property
    def email(self) -> str:
        """Gets the email of this Student.


        :return: The email of this Student.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Student.


        :param email: The email of this Student.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")  # noqa: E501

        self._email = email

    @property
    def name(self) -> str:
        """Gets the name of this Student.


        :return: The name of this Student.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Student.


        :param name: The name of this Student.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def password(self) -> str:
        """Gets the password of this Student.


        :return: The password of this Student.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Student.


        :param password: The password of this Student.
        :type password: str
        """
        if password is not None and len(password) < 16:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `16`")  # noqa: E501

        self._password = password
