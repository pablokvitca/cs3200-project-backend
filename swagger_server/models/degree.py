# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Degree(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, college_id: int=None, type: str=None):  # noqa: E501
        """Degree - a model defined in Swagger

        :param id: The id of this Degree.  # noqa: E501
        :type id: int
        :param name: The name of this Degree.  # noqa: E501
        :type name: str
        :param college_id: The college_id of this Degree.  # noqa: E501
        :type college_id: int
        :param type: The type of this Degree.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'college_id': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'college_id': 'college_ID',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._college_id = college_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Degree':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Degree of this Degree.  # noqa: E501
        :rtype: Degree
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Degree.


        :return: The id of this Degree.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Degree.


        :param id: The id of this Degree.
        :type id: int
        """
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Degree.


        :return: The name of this Degree.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Degree.


        :param name: The name of this Degree.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def college_id(self) -> int:
        """Gets the college_id of this Degree.


        :return: The college_id of this Degree.
        :rtype: int
        """
        return self._college_id

    @college_id.setter
    def college_id(self, college_id: int):
        """Sets the college_id of this Degree.


        :param college_id: The college_id of this Degree.
        :type college_id: int
        """
        if college_id is not None and college_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `college_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._college_id = college_id

    @property
    def type(self) -> str:
        """Gets the type of this Degree.

        degree type  # noqa: E501

        :return: The type of this Degree.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Degree.

        degree type  # noqa: E501

        :param type: The type of this Degree.
        :type type: str
        """
        allowed_values = ["Major", "Minor", "Combined"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
