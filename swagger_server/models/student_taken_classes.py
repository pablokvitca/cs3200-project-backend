# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StudentTakenClasses(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nuid: int=None, class_dept: str=None, class_number: int=None, transferred: bool=None, current: bool=None):  # noqa: E501
        """StudentTakenClasses - a model defined in Swagger

        :param nuid: The nuid of this StudentTakenClasses.  # noqa: E501
        :type nuid: int
        :param class_dept: The class_dept of this StudentTakenClasses.  # noqa: E501
        :type class_dept: str
        :param class_number: The class_number of this StudentTakenClasses.  # noqa: E501
        :type class_number: int
        :param transferred: The transferred of this StudentTakenClasses.  # noqa: E501
        :type transferred: bool
        :param current: The current of this StudentTakenClasses.  # noqa: E501
        :type current: bool
        """
        self.swagger_types = {
            'nuid': int,
            'class_dept': str,
            'class_number': int,
            'transferred': bool,
            'current': bool
        }

        self.attribute_map = {
            'nuid': 'nuid',
            'class_dept': 'class_dept',
            'class_number': 'class_number',
            'transferred': 'transferred',
            'current': 'current'
        }

        self._nuid = nuid
        self._class_dept = class_dept
        self._class_number = class_number
        self._transferred = transferred
        self._current = current

    @classmethod
    def from_dict(cls, dikt) -> 'StudentTakenClasses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StudentTakenClasses of this StudentTakenClasses.  # noqa: E501
        :rtype: StudentTakenClasses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nuid(self) -> int:
        """Gets the nuid of this StudentTakenClasses.


        :return: The nuid of this StudentTakenClasses.
        :rtype: int
        """
        return self._nuid

    @nuid.setter
    def nuid(self, nuid: int):
        """Sets the nuid of this StudentTakenClasses.


        :param nuid: The nuid of this StudentTakenClasses.
        :type nuid: int
        """
        if nuid is not None and nuid < 1:  # noqa: E501
            raise ValueError("Invalid value for `nuid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nuid = nuid

    @property
    def class_dept(self) -> str:
        """Gets the class_dept of this StudentTakenClasses.


        :return: The class_dept of this StudentTakenClasses.
        :rtype: str
        """
        return self._class_dept

    @class_dept.setter
    def class_dept(self, class_dept: str):
        """Sets the class_dept of this StudentTakenClasses.


        :param class_dept: The class_dept of this StudentTakenClasses.
        :type class_dept: str
        """
        if class_dept is not None and len(class_dept) > 5:
            raise ValueError("Invalid value for `class_dept`, length must be less than or equal to `5`")  # noqa: E501
        if class_dept is not None and len(class_dept) < 2:
            raise ValueError("Invalid value for `class_dept`, length must be greater than or equal to `2`")  # noqa: E501

        self._class_dept = class_dept

    @property
    def class_number(self) -> int:
        """Gets the class_number of this StudentTakenClasses.


        :return: The class_number of this StudentTakenClasses.
        :rtype: int
        """
        return self._class_number

    @class_number.setter
    def class_number(self, class_number: int):
        """Sets the class_number of this StudentTakenClasses.


        :param class_number: The class_number of this StudentTakenClasses.
        :type class_number: int
        """
        if class_number is not None and class_number > 9999:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value less than or equal to `9999`")  # noqa: E501
        if class_number is not None and class_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._class_number = class_number

    @property
    def transferred(self) -> bool:
        """Gets the transferred of this StudentTakenClasses.


        :return: The transferred of this StudentTakenClasses.
        :rtype: bool
        """
        return self._transferred

    @transferred.setter
    def transferred(self, transferred: bool):
        """Sets the transferred of this StudentTakenClasses.


        :param transferred: The transferred of this StudentTakenClasses.
        :type transferred: bool
        """

        self._transferred = transferred

    @property
    def current(self) -> bool:
        """Gets the current of this StudentTakenClasses.


        :return: The current of this StudentTakenClasses.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current: bool):
        """Sets the current of this StudentTakenClasses.


        :param current: The current of this StudentTakenClasses.
        :type current: bool
        """

        self._current = current
