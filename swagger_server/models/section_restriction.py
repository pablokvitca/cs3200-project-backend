# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SectionRestriction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, crn: int=None):  # noqa: E501
        """SectionRestriction - a model defined in Swagger

        :param type: The type of this SectionRestriction.  # noqa: E501
        :type type: str
        :param crn: The crn of this SectionRestriction.  # noqa: E501
        :type crn: int
        """
        self.swagger_types = {
            'type': str,
            'crn': int
        }

        self.attribute_map = {
            'type': 'type',
            'crn': 'crn'
        }

        self._type = type
        self._crn = crn

    @classmethod
    def from_dict(cls, dikt) -> 'SectionRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SectionRestriction of this SectionRestriction.  # noqa: E501
        :rtype: SectionRestriction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this SectionRestriction.


        :return: The type of this SectionRestriction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this SectionRestriction.


        :param type: The type of this SectionRestriction.
        :type type: str
        """
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if type is not None and len(type) < 0:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `0`")  # noqa: E501

        self._type = type

    @property
    def crn(self) -> int:
        """Gets the crn of this SectionRestriction.


        :return: The crn of this SectionRestriction.
        :rtype: int
        """
        return self._crn

    @crn.setter
    def crn(self, crn: int):
        """Sets the crn of this SectionRestriction.


        :param crn: The crn of this SectionRestriction.
        :type crn: int
        """
        if crn is not None and crn > 99999:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value less than or equal to `99999`")  # noqa: E501
        if crn is not None and crn < 0:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value greater than or equal to `0`")  # noqa: E501

        self._crn = crn
