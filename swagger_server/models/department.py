# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Department(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, short_code: str=None, long_name: str=None, college: int=None):  # noqa: E501
        """Department - a model defined in Swagger

        :param short_code: The short_code of this Department.  # noqa: E501
        :type short_code: str
        :param long_name: The long_name of this Department.  # noqa: E501
        :type long_name: str
        :param college: The college of this Department.  # noqa: E501
        :type college: int
        """
        self.swagger_types = {
            'short_code': str,
            'long_name': str,
            'college': int
        }

        self.attribute_map = {
            'short_code': 'short_code',
            'long_name': 'long_name',
            'college': 'college'
        }

        self._short_code = short_code
        self._long_name = long_name
        self._college = college

    @classmethod
    def from_dict(cls, dikt) -> 'Department':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Department of this Department.  # noqa: E501
        :rtype: Department
        """
        return util.deserialize_model(dikt, cls)

    @property
    def short_code(self) -> str:
        """Gets the short_code of this Department.


        :return: The short_code of this Department.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code: str):
        """Sets the short_code of this Department.


        :param short_code: The short_code of this Department.
        :type short_code: str
        """
        if short_code is not None and len(short_code) > 5:
            raise ValueError("Invalid value for `short_code`, length must be less than or equal to `5`")  # noqa: E501
        if short_code is not None and len(short_code) < 2:
            raise ValueError("Invalid value for `short_code`, length must be greater than or equal to `2`")  # noqa: E501

        self._short_code = short_code

    @property
    def long_name(self) -> str:
        """Gets the long_name of this Department.


        :return: The long_name of this Department.
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name: str):
        """Sets the long_name of this Department.


        :param long_name: The long_name of this Department.
        :type long_name: str
        """
        if long_name is not None and len(long_name) > 255:
            raise ValueError("Invalid value for `long_name`, length must be less than or equal to `255`")  # noqa: E501
        if long_name is not None and len(long_name) < 0:
            raise ValueError("Invalid value for `long_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._long_name = long_name

    @property
    def college(self) -> int:
        """Gets the college of this Department.


        :return: The college of this Department.
        :rtype: int
        """
        return self._college

    @college.setter
    def college(self, college: int):
        """Sets the college of this Department.


        :param college: The college of this Department.
        :type college: int
        """
        if college is not None and college < 1:  # noqa: E501
            raise ValueError("Invalid value for `college`, must be a value greater than or equal to `1`")  # noqa: E501

        self._college = college
