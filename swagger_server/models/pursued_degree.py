# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PursuedDegree(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nuid: int=None, degree_id: int=None):  # noqa: E501
        """PursuedDegree - a model defined in Swagger

        :param nuid: The nuid of this PursuedDegree.  # noqa: E501
        :type nuid: int
        :param degree_id: The degree_id of this PursuedDegree.  # noqa: E501
        :type degree_id: int
        """
        self.swagger_types = {
            'nuid': int,
            'degree_id': int
        }

        self.attribute_map = {
            'nuid': 'nuid',
            'degree_id': 'degree_id'
        }

        self._nuid = nuid
        self._degree_id = degree_id

    @classmethod
    def from_dict(cls, dikt) -> 'PursuedDegree':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PursuedDegree of this PursuedDegree.  # noqa: E501
        :rtype: PursuedDegree
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nuid(self) -> int:
        """Gets the nuid of this PursuedDegree.


        :return: The nuid of this PursuedDegree.
        :rtype: int
        """
        return self._nuid

    @nuid.setter
    def nuid(self, nuid: int):
        """Sets the nuid of this PursuedDegree.


        :param nuid: The nuid of this PursuedDegree.
        :type nuid: int
        """
        if nuid is not None and nuid < 1:  # noqa: E501
            raise ValueError("Invalid value for `nuid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nuid = nuid

    @property
    def degree_id(self) -> int:
        """Gets the degree_id of this PursuedDegree.


        :return: The degree_id of this PursuedDegree.
        :rtype: int
        """
        return self._degree_id

    @degree_id.setter
    def degree_id(self, degree_id: int):
        """Sets the degree_id of this PursuedDegree.


        :param degree_id: The degree_id of this PursuedDegree.
        :type degree_id: int
        """
        if degree_id is not None and degree_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `degree_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._degree_id = degree_id
