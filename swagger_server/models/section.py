# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Section(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, crn: int=None, class_dept: str=None, class_number: int=None, semester_offered: str=None, professor: str=None, capacity: int=None, registered: int=None):  # noqa: E501
        """Section - a model defined in Swagger

        :param crn: The crn of this Section.  # noqa: E501
        :type crn: int
        :param class_dept: The class_dept of this Section.  # noqa: E501
        :type class_dept: str
        :param class_number: The class_number of this Section.  # noqa: E501
        :type class_number: int
        :param semester_offered: The semester_offered of this Section.  # noqa: E501
        :type semester_offered: str
        :param professor: The professor of this Section.  # noqa: E501
        :type professor: str
        :param capacity: The capacity of this Section.  # noqa: E501
        :type capacity: int
        :param registered: The registered of this Section.  # noqa: E501
        :type registered: int
        """
        self.swagger_types = {
            'crn': int,
            'class_dept': str,
            'class_number': int,
            'semester_offered': str,
            'professor': str,
            'capacity': int,
            'registered': int
        }

        self.attribute_map = {
            'crn': 'crn',
            'class_dept': 'class_dept',
            'class_number': 'class_number',
            'semester_offered': 'semester_offered',
            'professor': 'professor',
            'capacity': 'capacity',
            'registered': 'registered'
        }

        self._crn = crn
        self._class_dept = class_dept
        self._class_number = class_number
        self._semester_offered = semester_offered
        self._professor = professor
        self._capacity = capacity
        self._registered = registered

    @classmethod
    def from_dict(cls, dikt) -> 'Section':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Section of this Section.  # noqa: E501
        :rtype: Section
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crn(self) -> int:
        """Gets the crn of this Section.


        :return: The crn of this Section.
        :rtype: int
        """
        return self._crn

    @crn.setter
    def crn(self, crn: int):
        """Sets the crn of this Section.


        :param crn: The crn of this Section.
        :type crn: int
        """
        if crn is not None and crn > 99999:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value less than or equal to `99999`")  # noqa: E501
        if crn is not None and crn < 0:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value greater than or equal to `0`")  # noqa: E501

        self._crn = crn

    @property
    def class_dept(self) -> str:
        """Gets the class_dept of this Section.


        :return: The class_dept of this Section.
        :rtype: str
        """
        return self._class_dept

    @class_dept.setter
    def class_dept(self, class_dept: str):
        """Sets the class_dept of this Section.


        :param class_dept: The class_dept of this Section.
        :type class_dept: str
        """
        if class_dept is not None and len(class_dept) > 5:
            raise ValueError("Invalid value for `class_dept`, length must be less than or equal to `5`")  # noqa: E501
        if class_dept is not None and len(class_dept) < 2:
            raise ValueError("Invalid value for `class_dept`, length must be greater than or equal to `2`")  # noqa: E501

        self._class_dept = class_dept

    @property
    def class_number(self) -> int:
        """Gets the class_number of this Section.


        :return: The class_number of this Section.
        :rtype: int
        """
        return self._class_number

    @class_number.setter
    def class_number(self, class_number: int):
        """Sets the class_number of this Section.


        :param class_number: The class_number of this Section.
        :type class_number: int
        """
        if class_number is not None and class_number > 9999:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value less than or equal to `9999`")  # noqa: E501
        if class_number is not None and class_number < 9:  # noqa: E501
            raise ValueError("Invalid value for `class_number`, must be a value greater than or equal to `9`")  # noqa: E501

        self._class_number = class_number

    @property
    def semester_offered(self) -> str:
        """Gets the semester_offered of this Section.

        the semester (of a year) during which the section is offered  # noqa: E501

        :return: The semester_offered of this Section.
        :rtype: str
        """
        return self._semester_offered

    @semester_offered.setter
    def semester_offered(self, semester_offered: str):
        """Sets the semester_offered of this Section.

        the semester (of a year) during which the section is offered  # noqa: E501

        :param semester_offered: The semester_offered of this Section.
        :type semester_offered: str
        """
        allowed_values = ["fall", "spring", "summer 1", "summer 2", "full summer"]  # noqa: E501
        if semester_offered not in allowed_values:
            raise ValueError(
                "Invalid value for `semester_offered` ({0}), must be one of {1}"
                .format(semester_offered, allowed_values)
            )

        self._semester_offered = semester_offered

    @property
    def professor(self) -> str:
        """Gets the professor of this Section.


        :return: The professor of this Section.
        :rtype: str
        """
        return self._professor

    @professor.setter
    def professor(self, professor: str):
        """Sets the professor of this Section.


        :param professor: The professor of this Section.
        :type professor: str
        """
        if professor is not None and len(professor) > 255:
            raise ValueError("Invalid value for `professor`, length must be less than or equal to `255`")  # noqa: E501
        if professor is not None and len(professor) < 0:
            raise ValueError("Invalid value for `professor`, length must be greater than or equal to `0`")  # noqa: E501

        self._professor = professor

    @property
    def capacity(self) -> int:
        """Gets the capacity of this Section.


        :return: The capacity of this Section.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this Section.


        :param capacity: The capacity of this Section.
        :type capacity: int
        """
        if capacity is not None and capacity < 0:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def registered(self) -> int:
        """Gets the registered of this Section.


        :return: The registered of this Section.
        :rtype: int
        """
        return self._registered

    @registered.setter
    def registered(self, registered: int):
        """Sets the registered of this Section.


        :param registered: The registered of this Section.
        :type registered: int
        """
        if registered is not None and registered < 0:  # noqa: E501
            raise ValueError("Invalid value for `registered`, must be a value greater than or equal to `0`")  # noqa: E501

        self._registered = registered
