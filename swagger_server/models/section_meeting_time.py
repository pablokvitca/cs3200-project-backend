# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class SectionMeetingTime(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, crn: int=None, start_time: str=None, end_time: str=None, meeting_days: str=None):  # noqa: E501
        """SectionMeetingTime - a model defined in Swagger

        :param crn: The crn of this SectionMeetingTime.  # noqa: E501
        :type crn: int
        :param start_time: The start_time of this SectionMeetingTime.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this SectionMeetingTime.  # noqa: E501
        :type end_time: str
        :param meeting_days: The meeting_days of this SectionMeetingTime.  # noqa: E501
        :type meeting_days: str
        """
        self.swagger_types = {
            'crn': int,
            'start_time': str,
            'end_time': str,
            'meeting_days': str
        }

        self.attribute_map = {
            'crn': 'crn',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'meeting_days': 'meeting_days'
        }

        self._crn = crn
        self._start_time = start_time
        self._end_time = end_time
        self._meeting_days = meeting_days

    @classmethod
    def from_dict(cls, dikt) -> 'SectionMeetingTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SectionMeetingTime of this SectionMeetingTime.  # noqa: E501
        :rtype: SectionMeetingTime
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crn(self) -> int:
        """Gets the crn of this SectionMeetingTime.


        :return: The crn of this SectionMeetingTime.
        :rtype: int
        """
        return self._crn

    @crn.setter
    def crn(self, crn: int):
        """Sets the crn of this SectionMeetingTime.


        :param crn: The crn of this SectionMeetingTime.
        :type crn: int
        """
        if crn is not None and crn > 99999:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value less than or equal to `99999`")  # noqa: E501
        if crn is not None and crn < 0:  # noqa: E501
            raise ValueError("Invalid value for `crn`, must be a value greater than or equal to `0`")  # noqa: E501

        self._crn = crn

    @property
    def start_time(self) -> str:
        """Gets the start_time of this SectionMeetingTime.


        :return: The start_time of this SectionMeetingTime.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this SectionMeetingTime.


        :param start_time: The start_time of this SectionMeetingTime.
        :type start_time: str
        """
        if start_time is not None and not re.search(r'^[0123]{1}[\\d]{1}[:]{1}[012345]{1}[\\d]{1}$', start_time):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^[0123]{1}[\\d]{1}[:]{1}[012345]{1}[\\d]{1}$/`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this SectionMeetingTime.


        :return: The end_time of this SectionMeetingTime.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this SectionMeetingTime.


        :param end_time: The end_time of this SectionMeetingTime.
        :type end_time: str
        """
        if end_time is not None and not re.search(r'^[0123]{1}[\\d]{1}[:]{1}[012345]{1}[\\d]{1}$', end_time):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a follow pattern or equal to `/^[0123]{1}[\\d]{1}[:]{1}[012345]{1}[\\d]{1}$/`")  # noqa: E501

        self._end_time = end_time

    @property
    def meeting_days(self) -> str:
        """Gets the meeting_days of this SectionMeetingTime.


        :return: The meeting_days of this SectionMeetingTime.
        :rtype: str
        """
        return self._meeting_days

    @meeting_days.setter
    def meeting_days(self, meeting_days: str):
        """Sets the meeting_days of this SectionMeetingTime.


        :param meeting_days: The meeting_days of this SectionMeetingTime.
        :type meeting_days: str
        """
        if meeting_days is not None and not re.search(r'^[01]{7}$', meeting_days):  # noqa: E501
            raise ValueError("Invalid value for `meeting_days`, must be a follow pattern or equal to `/^[01]{7}$/`")  # noqa: E501

        self._meeting_days = meeting_days
