# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, department: str=None, class_number: int=None, class_level: str=None, name: str=None, description: str=None, credit_hours: int=None):  # noqa: E501
        """ModelClass - a model defined in Swagger

        :param department: The department of this ModelClass.  # noqa: E501
        :type department: str
        :param class_number: The class_number of this ModelClass.  # noqa: E501
        :type class_number: int
        :param class_level: The class_level of this ModelClass.  # noqa: E501
        :type class_level: str
        :param name: The name of this ModelClass.  # noqa: E501
        :type name: str
        :param description: The description of this ModelClass.  # noqa: E501
        :type description: str
        :param credit_hours: The credit_hours of this ModelClass.  # noqa: E501
        :type credit_hours: int
        """
        self.swagger_types = {
            'department': str,
            'class_number': int,
            'class_level': str,
            'name': str,
            'description': str,
            'credit_hours': int
        }

        self.attribute_map = {
            'department': 'department',
            'class_number': 'class_number',
            'class_level': 'class_level',
            'name': 'name',
            'description': 'description',
            'credit_hours': 'credit_hours'
        }

        self._department = department
        self._class_number = class_number
        self._class_level = class_level
        self._name = name
        self._description = description
        self._credit_hours = credit_hours

    @classmethod
    def from_dict(cls, dikt) -> 'ModelClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Class of this ModelClass.  # noqa: E501
        :rtype: ModelClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def department(self) -> str:
        """Gets the department of this ModelClass.


        :return: The department of this ModelClass.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department: str):
        """Sets the department of this ModelClass.


        :param department: The department of this ModelClass.
        :type department: str
        """
        if department is not None and len(department) > 5:
            raise ValueError("Invalid value for `department`, length must be less than or equal to `5`")  # noqa: E501
        if department is not None and len(department) < 2:
            raise ValueError("Invalid value for `department`, length must be greater than or equal to `2`")  # noqa: E501

        self._department = department

    @property
    def class_number(self) -> int:
        """Gets the class_number of this ModelClass.


        :return: The class_number of this ModelClass.
        :rtype: int
        """
        return self._class_number

    @class_number.setter
    def class_number(self, class_number: int):
        """Sets the class_number of this ModelClass.


        :param class_number: The class_number of this ModelClass.
        :type class_number: int
        """

        self._class_number = class_number

    @property
    def class_level(self) -> str:
        """Gets the class_level of this ModelClass.

        level at which the class is offered  # noqa: E501

        :return: The class_level of this ModelClass.
        :rtype: str
        """
        return self._class_level

    @class_level.setter
    def class_level(self, class_level: str):
        """Sets the class_level of this ModelClass.

        level at which the class is offered  # noqa: E501

        :param class_level: The class_level of this ModelClass.
        :type class_level: str
        """
        allowed_values = ["Undergraduate", "Graduate"]  # noqa: E501
        if class_level not in allowed_values:
            raise ValueError(
                "Invalid value for `class_level` ({0}), must be one of {1}"
                .format(class_level, allowed_values)
            )

        self._class_level = class_level

    @property
    def name(self) -> str:
        """Gets the name of this ModelClass.


        :return: The name of this ModelClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelClass.


        :param name: The name of this ModelClass.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ModelClass.


        :return: The description of this ModelClass.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ModelClass.


        :param description: The description of this ModelClass.
        :type description: str
        """
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def credit_hours(self) -> int:
        """Gets the credit_hours of this ModelClass.


        :return: The credit_hours of this ModelClass.
        :rtype: int
        """
        return self._credit_hours

    @credit_hours.setter
    def credit_hours(self, credit_hours: int):
        """Sets the credit_hours of this ModelClass.


        :param credit_hours: The credit_hours of this ModelClass.
        :type credit_hours: int
        """

        self._credit_hours = credit_hours
